#!/usr/bin/python

from __future__ import print_function
import optparse
import re
import logging
from itertools import chain

_logger = logging.getLogger(__name__)

def split(args):
    toks = [re.split("([\*+-/]+)",text) for text in args.strip().split()]
    tok = [x for x in chain(*toks) if x]
    _logger.debug("chain {0}".format(tok))

    mult=dict(k=1024,K=1024,m=1024*1024,M=1024*1024,G=1024*1024*1024,g=1024*1024*1024)
    for i,val in enumerate(tok):
        m = re.match("(\S+)([KkMmGg])$",val)
        if m is None:
            continue
        lv = m.group(1)
        rv = mult[m.group(2)]
        _logger.debug("lv={0},rv={1}".format(lv,rv))
        val="({0}*{1})".format(lv,rv)
        tok[i] = val

    return " ".join(tok)

class Value(object):
    def __init__(self,text):
        self.value = eval(text)
    def __str__(self):
        ink = self.value/1024
        inm = self.value/1024/1024
        ing = self.value/1024/1024/1024
        return "{0} {1:.3f}K {2:.3f}M {3:.3f}G".format(
            self.value,ink,inm,ing)

def main():
    parser = optparse.OptionParser()
    parser.add_option("--debug",action="count",default=0)
    opts,args = parser.parse_args()

    logging.basicConfig( level=logging.INFO )
    if opts.debug:
        _logger.setLevel(logging.DEBUG)
        _logger.debug("debug level {0}".format(opts.debug))
        if opts.debug > 1:
            logging.getLogger("").setLevel(logging.DEBUG)

    estr = split(" ".join(args))
    val = Value(estr)
    print("{0}".format(val))

if __name__ == "__main__":
    main()

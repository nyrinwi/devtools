#!/usr/bin/env python3
import optparse
import re
import logging
from itertools import chain

_logger = logging.getLogger(__name__)

def expand(text):
    mult = {"k":1024,"m":1024*1024,"g":1024**3,"t":1024**4}
    keys = "".join([str(x) for x in mult.keys()])
    patt = "(\d*\.*\d)([{0}{1}])".format(keys,keys.upper())
    for m in re.finditer(patt,text):
        repl = float(m.group(1))*mult.get(m.group(2))
        text = re.sub(m.group(0),str(repl),text)
    _logger.debug("expanded: {0}".format(text))
    return text

class Value(object):
    def __init__(self,text):
        self.value = eval(text)
    def __str__(self):
        ink = self.value/1024
        inm = self.value/1024/1024
        ing = self.value/1024/1024/1024
        return "{0} {1:.3f}K {2:.3f}M {3:.3f}G".format(
            self.value,ink,inm,ing)

def main():
    parser = optparse.OptionParser("usage %prog {expression}")
    parser.add_option("--debug",action="count",default=0)
    opts,args = parser.parse_args()

    logging.basicConfig( level=logging.INFO )
    if opts.debug:
        _logger.setLevel(logging.DEBUG)
        _logger.debug("debug level {0}".format(opts.debug))
        if opts.debug > 1:
            logging.getLogger("").setLevel(logging.DEBUG)

    _logger.debug("args={0}".format(args))
    estr = " ".join(args)
    estr = expand(estr)
    val = Value(estr)
    print("{0}".format(val))

if __name__ == "__main__":
    main()

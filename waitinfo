#!/usr/bin/python

import optparse
import logging
import os
import sys
import signal

_logger = logging.getLogger(__name__)

_bysig = dict([ (y,x) for (x,y) in vars(signal).items() if x.startswith("SIG") and not x.startswith("SIG_")])

def signame(x):
    return _bysig.get(x)

def waitinfo(x):
    x = int(x)
    if x == 127:
        return "{x:3}: command not found".format(**locals())
    elif x == 126:
        return "{x:3}: command not found".format(**locals())

    exited = os.WIFEXITED(x)
    signaled = os.WIFSIGNALED(x)

    assert(exited ^ signaled)

    if exited:
        how = "exited {0}".format(os.WEXITSTATUS(x))
    elif signaled:
        termsig = os.WTERMSIG(x)
        coredump = "core dumped" if os.WCOREDUMP(x) else "no core dump"
        how = "signaled {0} [{1}] {2}".format(signame(termsig),termsig,coredump)
    else:
        raise RuntimeError("invalid status {0}".format(x))

    return "{x:5}: {how}".format(**locals())

def main():
    parser = optparse.OptionParser()
    parser.usage = "%prog status [status...] | %prog -x command [args...]"
    parser.description = "Print the details of the exit status given. "\
     "Or execute a specified command, then wait for the status and "\
     "show the details"
    parser.add_option("-x","--execute",action="store_true",default=False,
        help="execute the command in the shell and wait for the status")
    parser.add_option("--debug",action="count",default=0)
    opts,args = parser.parse_args()

    logging.basicConfig( level=logging.INFO )
    if opts.debug:
        _logger.setLevel(logging.DEBUG)
        _logger.debug("debug level {0}".format(opts.debug))
        if opts.debug > 1:
            logging.getLogger("").setLevel(logging.DEBUG)

    if opts.execute:
        stats = [ os.popen(" ".join(args)).close() ]
    else:
        stats = args[:]
    _logger.info("stats {0}".format(stats))

    if not stats:
        _logger.error("nothing to do")
        sys.exit(1)

    for s in stats:
        print waitinfo(s)

if __name__ == "__main__":
    main()


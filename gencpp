#!/usr/bin/env python3

import argparse
import logging

_logger = logging.getLogger(__name__)

_monotime="""\
// C++98
static inline double monotime()
{
    timespec ts;
    clock_gettime(CLOCK_MONOTONIC,&ts);
    return ts.tv_sec + 1e-9*ts.tv_nsec;
}

// C++11 or later
static inline double monoTime()
{
    using namespace std::chrono;
    auto t0 = steady_clock::now();
    auto now_ns = time_point_cast<nanoseconds>(t0);
    return 1e-9*now_ns.time_since_epoch().count();
}

"""

_catch="""\
catch (const std::exception& exc)
{
}
"""

def main():
    parser = argparse.ArgumentParser("Generate C++ boilerplate")
    parser.add_argument("-m","--monotime",action="store_true",default=False,
        help="monotonic timer")
    parser.add_argument("-c","--catch",action="store_true",default=False,
        help="catch(const exception &e)")
    args = parser.parse_args()

    if args.monotime:
        print(_monotime)
    if args.catch:
        print(_catch)

if __name__ == "__main__":
    main()

#!/usr/bin/env python3

import re
import argparse
import logging
import subprocess
from pathlib import Path
import tempfile
import shutil

_logger = logging.getLogger(__name__)
class TempDir:
    def __init__(self):
        self._name = tempfile.mkdtemp()

    @property
    def name(self):
        return self._name

    @property
    def path(self):
        return Path(self._name)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        shutil.rmtree(self._name)
        if exc_val is not None:
            raise exc_val

def ldd(exe):
    r,raw = subprocess.getstatusoutput(f"ldd {exe}")
    ret = []
    for line in raw.splitlines():
        _logger.debug(f"{line}")
        line = line.strip()
        mm = re.search("(/\S+)",line)
        if mm is None:
            continue
        ret.append(mm.group(1))
    return ret

def genRoot(path,*exes):
    binDir = path/"bin"
    libDir = path/"lib"
    for p in path, libDir, binDir:
        p.mkdir(exist_ok=True)
    for exe in exes:
        shutil.copy(exe,binDir/Path(exe).name)
        libs = ldd(exe)
        for lib in libs:
            dest = path.joinpath(*Path(lib).parts[1:])
            dest.parent.mkdir(exist_ok=True)
            print(dest)
            shutil.copy(lib,dest)
    subprocess.check_call(f"/usr/sbin/ldconfig -n {libDir}",shell=True)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(dest="exe",nargs="+")
    parser.add_argument("-r","--root",
        help="name of the root inside the tarball, defaults to the base name of the first exe specified. "
            "This also becomes the default base name of the tarball")
    parser.add_argument("-o","--output",metavar="basename",
        help="specify the name of the tarball")
    parser.add_argument("--debug",action="count",default=0)
    opts = parser.parse_args()

    logging.basicConfig( level=logging.INFO )
    if opts.debug:
        _logger.setLevel(logging.DEBUG)
        _logger.debug("debug level {0}".format(opts.debug))
        if opts.debug > 1:
            logging.getLogger("").setLevel(logging.DEBUG)

    if opts.output:
        basename = opts.output
    elif opts.root:
        basename = opts.root
    else:
        basename = Path(opts.exe[0]).name
    tarball = Path(basename).with_suffix(".txz")
    with TempDir() as tmp:
        _logger.info(f"{tmp.name}")
        chroot = tmp.path / basename
        genRoot(chroot,*opts.exe)
        subprocess.check_call(f"tar -C {tmp.name} -cf {tarball} --xz {chroot.name}",shell=True)
    subprocess.check_call(f"ls -l {tarball}",shell=True)


if __name__ == "__main__":
    main()
